#!/bin/bash
#================================================================================================
#
# This file is licensed under the terms of the GNU General Public
# License version 2. This program is licensed "as is" without any
# warranty of any kind, whether express or implied.
#
# This file is a part of the make OpenWrt
# https://github.com/ophub/amlogic-s9xxx-openwrt
#
# Description: Install openwrt to eMMC for Allwinner boxes
# Copyright (C) 2022- https://github.com/unifreq/openwrt_packit
# Copyright (C) 2022- https://github.com/ophub/amlogic-s9xxx-openwrt
#
# Command: openwrt-install-allwinner
#
#======================================== Functions list ========================================
#
# error_msg          : Output error message
# check_depends      : Check dependencies
# init_var           : Initialize all variables
# set_rootfs_type    : Set the type of file system
# create_partition   : Create emmc partition
# copy_bootfs        : Copy bootfs partition files
# copy_rootfs        : Copy rootfs partition files
#
#==================================== Set default parameters ====================================
#
# Custom OpenWrt configuration information
op_release="/etc/flippy-openwrt-release"
# Set the installation file preprocessing directory
tmp_path="/ddbr"

# Set font color
STEPS="[\033[95m STEPS \033[0m]"
INFO="[\033[94m INFO \033[0m]"
SUCCESS="[\033[92m SUCCESS \033[0m]"
OPTIONS="[\033[93m OPTIONS \033[0m]"
ERROR="[\033[91m ERROR \033[0m]"
#
#================================================================================================

# Encountered a serious error, abort the script execution
error_msg() {
    echo -e "${ERROR} ${1}"
    exit 1
}

# Check dependencies
check_depends() {
    echo -e "${STEPS} Start checking dependencies..."

    necessary_packages=(
        "tar"
        "mkfs.fat" "mkfs.ext4" "mkfs.btrfs" "mkfs.f2fs" "mkfs.xfs"
        "parted" "losetup" "mount" "fdisk" "lsblk"
    )

    i="1"
    for package in ${necessary_packages[*]}; do
        [[ -n "$(which "${package}" 2>/dev/null)" ]] || error_msg "Missing [ ${package} ] packages."
        let i++
    done
}

# Get the partition name of the root file system
get_root_partition_name() {
    local paths=("/" "/overlay" "/rom")
    local partition_name

    for path in "${paths[@]}"; do
        partition_name=$(df "${path}" | awk 'NR==2 {print $1}' | awk -F '/' '{print $3}')
        [[ -n "${partition_name}" ]] && break
    done

    [[ -z "${partition_name}" ]] && error_msg "Cannot find the root partition!"
    echo "${partition_name}"
}

# Initialize all variables
init_var() {
    echo -e "${STEPS} Start initializing the environment..."

    # View device configuration information
    [[ -s "${op_release}" ]] || error_msg "[ ${op_release} ] file is missing!"
    PLATFORM="$(cat "${op_release}" | grep -E "^PLATFORM" | awk -F"'" '{print $2}')"
    FDTFILE="$(cat "${op_release}" | grep -E "^FDTFILE" | awk -F"'" '{print $2}')"
    FAMILY="$(cat "${op_release}" | grep -E "^FAMILY" | awk -F"'" '{print $2}')"
    MAINLINE_UBOOT="$(cat "${op_release}" | grep -E "^MAINLINE_UBOOT" | awk -F"'" '{print $2}')"
    BOOTLOADER_IMG="$(cat "${op_release}" | grep -E "^ANDROID_UBOOT" | awk -F"'" '{print $2}')"

    # Check key files and parameters
    [[ "${PLATFORM}" == "allwinner" ]] || error_msg "This script only supports [ Allwinner ] series boxes."
    [[ -f "${BOOTLOADER_IMG}" ]] || error_msg "Missing BOOTLOADER_IMG file: [ ${BOOTLOADER_IMG} ]."
    [[ -n "${FDTFILE}" && -n "${FAMILY}" ]] || error_msg "Config is missing in [ ${op_release} ] file."

    # Display device configuration information
    echo -e "${INFO} PLATFORM: [ ${PLATFORM} ]"
    echo -e "${INFO} FDTFILE: [ ${FDTFILE} ]"
    echo -e "${INFO} FAMILY: [ ${FAMILY} ]"
    echo -e "${INFO} MAINLINE_UBOOT: [ ${MAINLINE_UBOOT} ]"
    echo -e "${INFO} BOOTLOADER_IMG:  [ ${BOOTLOADER_IMG} ]"

    # Check the current system running disk
    root_devname="$(get_root_partition_name)"
    if lsblk -l | grep -E "^${root_devname}boot0" >/dev/null; then
        error_msg "You are running in eMMC mode, please boot system with usb or tf card!"
    fi

    # Find emmc disk, first find emmc containing boot0 partition
    install_emmc="$(lsblk -l -o NAME | grep -oE '(mmcblk[0-9]?boot0)' | sed "s/boot0//g")"
    # Find emmc disk, find emmc that does not contain the boot0 partition
    [[ -z "${install_emmc}" ]] && install_emmc="$(lsblk -l -o NAME | grep -oE '(mmcblk[0-9]?)' | grep -vE ^${root_devname} | sort -u)"
    # Check if emmc exists
    [[ -z "${install_emmc}" ]] && error_msg "The eMMC storage not found in this device!"
    # Location of emmc
    DEV_EMMC="/dev/${install_emmc}"
    echo -e "${INFO} The device eMMC name: [ ${DEV_EMMC} ]"

    # Create a file preprocessing directory
    [[ -d "${tmp_path}" ]] && rm -rf ${tmp_path}/*
    DIR_INSTALL="${tmp_path}/install"
    mkdir -p ${DIR_INSTALL} && chmod 777 ${tmp_path}

    # Generate New UUID
    ROOTFS1_UUID="$(cat /proc/sys/kernel/random/uuid)"
    [[ -z "${ROOTFS1_UUID}" ]] && ROOTFS1_UUID="$(uuidgen)"
    [[ -z "${ROOTFS1_UUID}" ]] && error_msg "The new ROOTFS1_UUID is invalid, cannot continue."
    ROOTFS2_UUID="$(cat /proc/sys/kernel/random/uuid)"
    [[ -z "${ROOTFS2_UUID}" ]] && ROOTFS2_UUID="$(uuidgen)"
    [[ -z "${ROOTFS2_UUID}" ]] && error_msg "The new ROOTFS2_UUID is invalid, cannot continue."
    SHARE_DATA_UUID="$(cat /proc/sys/kernel/random/uuid)"
    [[ -z "${SHARE_DATA_UUID}" ]] && SHARE_DATA_UUID="$(uuidgen)"
    [[ -z "${SHARE_DATA_UUID}" ]] && error_msg "The new SHARE_DATA_UUID is invalid, cannot continue."
}

# Create emmc partition
create_partition() {
    cd /
    echo -e "${STEPS} Start creating eMMC partition..."

    # Clear emmc disk data
    exists_pts="$(parted ${DEV_EMMC} print 2>/dev/null | grep 'primary' | wc -l)"
    if [[ "${exists_pts}" -gt "0" ]]; then
        echo -e "${INFO} Delete the existing [ ${exists_pts} ] partitions."
        i=1
        while [[ "${i}" -le "${exists_pts}" ]]; do
            umount -f ${DEV_EMMC}p${i} 2>/dev/null
            parted -s ${DEV_EMMC} rm ${i}
            [[ "${?}" -eq "0" ]] || error_msg "Failed to delete the [ ${i} ] partition."
            let i++
        done
    fi
    echo -e "${INFO} Remove the current bootloader."
    dd if=/dev/zero of=${DEV_EMMC} bs=1M count=16 conv=fsync

    # Set partition size (Unit: MiB)
    BLANK1="16"
    BOOT="256"
    ROOT1="960"
    ROOT2="960"

    # Format emmc disk
    echo -e "${INFO} Start create MBR and partittion."
    parted -s "${DEV_EMMC}" mklabel msdos
    parted -s "${DEV_EMMC}" mkpart primary fat32 $((BLANK1))MiB $((BLANK1 + BOOT - 1))MiB
    parted -s "${DEV_EMMC}" mkpart primary btrfs $((BLANK1 + BOOT))MiB $((BLANK1 + BOOT + ROOT1 - 1))MiB
    parted -s "${DEV_EMMC}" mkpart primary btrfs $((BLANK1 + BOOT + ROOT1))MiB $((BLANK1 + BOOT + ROOT1 + ROOT2 - 1))MiB
    parted -s "${DEV_EMMC}" mkpart primary btrfs $((BLANK1 + BOOT + ROOT1 + ROOT2))MiB 100%
    [[ "${?}" -eq "0" ]] || error_msg "Failed to create partition using [ parted ]."

    # Write bootloader
    if [[ -n "${BOOTLOADER_IMG}" && -f "${BOOTLOADER_IMG}" ]] &&
        [[ -n "${MAINLINE_UBOOT}" && -f "${MAINLINE_UBOOT}" ]]; then
        echo -e "${INFO} 01. Write bootloader: [ ${MAINLINE_UBOOT} ]"
        dd if="${BOOTLOADER_IMG}" of="${DEV_EMMC}" conv=fsync,notrunc bs=8k seek=1
        dd if="${MAINLINE_UBOOT}" of="${DEV_EMMC}" conv=fsync,notrunc bs=8k seek=5
    elif [[ -n "${BOOTLOADER_IMG}" && -f "${BOOTLOADER_IMG}" ]]; then
        echo -e "${INFO} 02. Write bootloader: [ ${BOOTLOADER_IMG} ]"
        dd if="${BOOTLOADER_IMG}" of="${DEV_EMMC}" conv=fsync,notrunc bs=8k seek=1
    fi
    [[ "${?}" -eq "0" ]] || error_msg "Failed to write bootloader using [ dd ]."
}

# Copy bootfs partition files
copy_bootfs() {
    cd /
    echo -e "${STEPS} Start processing the BOOTFS partition..."

    PART_BOOT="${DEV_EMMC}p1"

    if grep -q ${PART_BOOT} /proc/mounts; then
        echo -e "${INFO} Unmounting BOOT partiton."
        umount -f ${PART_BOOT}
        [[ "${?}" -eq "0" ]] || error_msg "Failed to umount [ ${PART_BOOT} ]."
    fi

    echo -e "${INFO} Start formatting BOOTFS partition..."
    mkfs.fat -F 32 -n "EMMC_BOOT" ${PART_BOOT} >/dev/null 2>&1
    [[ "${?}" -eq "0" ]] || error_msg "Failed to format BOOTFS using [ mkfs.fat ]."
    mount -o rw ${PART_BOOT} ${DIR_INSTALL}
    [[ "${?}" -eq "0" ]] || error_msg "Failed to mount BOOTFS partition."

    echo -e "${INFO} Start copy BOOTFS partition data."
    cp -rf /boot/* ${DIR_INSTALL}
    rm -rf ${DIR_INSTALL}/'System Volume Information'

    # Update [ /boot/armbianEnv.txt ] settings
    armbianenv_rootdev="UUID=${ROOTFS1_UUID}"
    armbianenv_conf_file="${DIR_INSTALL}/armbianEnv.txt"
    [[ -f "${armbianenv_conf_file}" ]] && {
        echo -e "${INFO} Update the [ armbianEnv.conf ] file."
        sed -i "s|^fdtfile=.*|fdtfile=${PLATFORM}/${FDTFILE}|g" ${armbianenv_conf_file}
        sed -i "s|^rootfstype=.*|rootfstype=btrfs|g" ${armbianenv_conf_file}
        sed -i "s|^rootdev=.*|rootdev=${armbianenv_rootdev}|g" ${armbianenv_conf_file}
        sed -i "s|^rootflags=.*|rootflags=compress=zstd:6|g" ${armbianenv_conf_file}
        sed -i "s|^overlay_prefix=.*|overlay_prefix=${FAMILY}|g" ${armbianenv_conf_file}
    }

    # Update [ /boot/uEnv.txt ] settings
    uenv_mount_string="UUID=${ROOTFS1_UUID} rootflags=compress=zstd:6 rootfstype=btrfs"
    uenv_conf_file="${DIR_INSTALL}/uEnv.txt"
    [[ -f "${uenv_conf_file}" ]] && {
        echo -e "${INFO} Update the [ uEnv.txt ] file."
        sed -i "s|root=.*console=ttyS0|root=${uenv_mount_string} console=ttyS0|g" ${uenv_conf_file}
        sed -i "s|sun.*.dtb|${FDTFILE}|g" ${uenv_conf_file}
    }

    # Update [ /boot/extlinux/extlinux.conf ] settings
    boot_extlinux_file="${DIR_INSTALL}/extlinux/extlinux.conf"
    [[ -f "${boot_extlinux_file}" ]] && {
        echo -e "${INFO} Update the [ extlinux.conf ] file."
        sed -i "s|root=.*console=ttyS0|root=${uenv_mount_string} console=ttyS0|g" ${boot_extlinux_file}
        sed -i "s|sun.*.dtb|${FDTFILE}|g" ${boot_extlinux_file}
    }

    # Replace eMMC boot files
    [[ -f "${DIR_INSTALL}/boot-emmc.scr" ]] && mv -f ${DIR_INSTALL}/boot-emmc.scr ${DIR_INSTALL}/boot.scr
    [[ -f "${DIR_INSTALL}/boot-emmc.cmd" ]] && mv -f ${DIR_INSTALL}/boot-emmc.cmd ${DIR_INSTALL}/boot.cmd

    sync && sleep 3
    umount -f ${DIR_INSTALL}
    [[ "${?}" -eq "0" ]] || error_msg "Failed to umount [ ${DIR_INSTALL} ]."
}

# Copy rootfs partition files
copy_rootfs() {
    cd /
    echo -e "${STEPS} Start processing the ROOTFS1 partition..."

    PART_ROOT="${DEV_EMMC}p2"

    if grep -q ${PART_ROOT} /proc/mounts; then
        echo -e "${INFO} Unmounting ROOTFS1 partiton."
        umount -f ${PART_ROOT}
        [[ "${?}" -eq "0" ]] || error_msg "Failed to umount [ ${PART_ROOT} ]."
    fi

    echo -e "${INFO} Start formatting ROOTFS1 partition..."
    mkfs.btrfs -f -U ${ROOTFS1_UUID} -L "MMC_ROOTFS1" -m single ${PART_ROOT} >/dev/null 2>&1
    [[ "${?}" -eq "0" ]] || error_msg "Failed to format ROOTFS1 using [ mkfs.btrfs ]"
    mount -t btrfs -o compress=zstd:6 ${PART_ROOT} ${DIR_INSTALL}
    [[ "${?}" -eq "0" ]] || error_msg "Failed to mount ROOTFS1 partition."

    # Create snapshot directory
    btrfs subvolume create ${DIR_INSTALL}/etc >/dev/null 2>&1

    echo -e "${INFO} Start copy ROOTFS partition data."
    # Create relevant directories
    mkdir -p ${DIR_INSTALL}/{boot/,dev/,overlay/,rom/,mnt/,proc/,run/,sys/,tmp/,.reserved/,.snapshots/}
    chmod 777 ${DIR_INSTALL}/tmp
    # Copy the relevant directory
    COPY_SRC="root etc bin sbin lib opt usr www"
    for src in ${COPY_SRC}; do
        echo -e "${INFO} Copy the [ ${src} ] directory."
        tar -cf - ${src} | (
            cd ${DIR_INSTALL}
            tar -mxf -
        )
    done
    # Create relevant symbolic link
    ln -sf /lib ${DIR_INSTALL}/lib64
    ln -sf /tmp ${DIR_INSTALL}/var

    # Generate etc/fstab
    echo -e "${INFO} Generate the new fstab file."
    rm -f ${DIR_INSTALL}/etc/fstab
    cat >${DIR_INSTALL}/etc/fstab <<EOF
UUID=${ROOTFS1_UUID}    /        btrfs    compress=zstd:6      0 1
LABEL=EMMC_BOOT         /boot    vfat     defaults             0 2
#tmpfs                  /tmp     tmpfs    defaults,nosuid      0 0
EOF

    # Update etc/config/fstab
    sed -i "s|option label 'BOOT'|option label 'EMMC_BOOT'|" ${DIR_INSTALL}/etc/config/fstab
    sed -i "s|option uuid.*|option uuid '${ROOTFS1_UUID}'|" ${DIR_INSTALL}/etc/config/fstab

    # Add the third and fourth partition mount directory
    mkdir -p ${DIR_INSTALL}/mnt/${install_emmc}p3
    mkdir -p ${DIR_INSTALL}/mnt/${install_emmc}p4/docker
    rm -rf ${DIR_INSTALL}/opt/docker
    ln -sf /mnt/${install_emmc}p4/docker/ ${DIR_INSTALL}/opt/docker

    # Update docker settings
    echo -e "${INFO} Update docker data storage path."
    [[ -f "${DIR_INSTALL}/etc/docker/daemon.json" ]] && {
        sed -i "s|mnt\/.*\/docker|mnt\/${install_emmc}p4\/docker|" ${DIR_INSTALL}/etc/docker/daemon.json
    }
    [[ -f "${DIR_INSTALL}/etc/config/dockerd" ]] && {
        sed -i "s|mnt\/.*\/docker|mnt\/${install_emmc}p4\/docker|" ${DIR_INSTALL}/etc/config/dockerd
    }

    # Generate initialization snapshot
    echo -e "${INFO} Create initial /etc snapshot."
    btrfs subvolume snapshot -r ${DIR_INSTALL}/etc ${DIR_INSTALL}/.snapshots/etc-000 >/dev/null 2>&1

    sync && sleep 3
    umount -f ${DIR_INSTALL}
    [[ "${?}" -eq "0" ]] || error_msg "Failed to umount [ ${DIR_INSTALL} ]."

    # Format the third and fourth partition
    umount -f ${DEV_EMMC}p3 2>/dev/null
    umount -f ${DEV_EMMC}p4 2>/dev/null

    echo -e "${STEPS} Start formatting ROOTFS2 partition..."
    mkfs.btrfs -f -U ${ROOTFS2_UUID} -L "MMC_ROOTFS2" -m single ${DEV_EMMC}p3 >/dev/null 2>&1
    [[ "${?}" -eq "0" ]] || error_msg "Failed to format ROOTFS2 using [ mkfs.btrfs ]"

    echo -e "${STEPS} Start formatting SHARE_DATA partition..."
    mkfs.btrfs -f -U ${SHARE_DATA_UUID} -L "SHARE_DATA" -m single ${DEV_EMMC}p4 >/dev/null 2>&1
    [[ "${?}" -eq "0" ]] || error_msg "Failed to format SHARE_DATA using [ mkfs.btrfs ]"
}

# Check script permission
[[ -x "/usr/sbin/openwrt-install-allwinner" ]] || {
    error_msg "Please grant execution permission: [ chmod +x /usr/sbin/openwrt-install-allwinner ]"
}

echo -e "${STEPS} Start install OpenWrt to eMMC..."

# Check dependencies
check_depends
# Initialize all variables
init_var "${@}"
# Create emmc partition
create_partition
# Copy bootfs partition files
copy_bootfs
# Copy rootfs partition files
copy_rootfs

echo -e "${SUCCESS} Successful installed, please unplug the USB, re-insert the power supply to start the OpenWrt."
exit 0
